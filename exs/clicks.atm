val SDL = require "SDL"
val TTF = require "SDL.ttf"
require "atmos"
set sdl = require "atmos.env.sdl"

SDL.init() --> assert
TTF.init() --> assert

defer {
    TTF.quit()
    SDL.quit()
}

set WIN = SDL.createWindow @{
	title  = "Atmos-SDL: Clicks",
	width  = 256,
	height = 256,
    flags  = @{ SDL.flags.OpenGL },
} --> assert

set REN = SDL.createRenderer(WIN,-1) --> assert
set sdl.ren = REN
set FNT = TTF.open("DejaVuSans.ttf", 10) --> assert

var txts = #{}

val D = 20
val R = 10
var rect = @{x=(256/2)-R,y=(256/2)-R, w=D,h=D}

spawn {
    par {
        every :sdl.draw {
            REN::setDrawColor(0x000000)
            REN::clear()
            REN::setDrawColor(0xFFFFFF)
            REN::fillRect(rect)
            loop i,t in txts {
                sdl.write(FNT, t, @{x=256-70, y=20+(i*15)})
            }
            REN::present()
        }
    } with {
        every m in SDL.event.MouseMotion {
            set rect.x = m.x - R
            set rect.y = m.y - R
        }
    }
}

spawn {
    ;;;
    ;;  - < 50 tokens
    ;;  - Hot observable
    ;;  - :click.dn (pos, n)
    ;;      - N cliques espacados em 250ms na mesma posicao
    ;;      - caso a pos mude, reconheca como esta
    ;;      - somente apos 250ms um outro dn pode ser reconhecido
    ;;  - :click.up (pos, n)
    ;;      - reconhecido apenas apos um dn
    ;;      - em qq circunstancia
    ;;      - imediato apos dn se estado up
    ;;;
    loop {
        val dn = await <- SDL.event.MouseButtonDown
        var n = 1
        var up
        spawn {
            every v in SDL.event.MouseButtonUp {
                set up = v
            }
        }
        watching SDL.event.MouseMotion {
            loop {
                watching SDL.event.MouseButtonDown {
                    set up = nil
                    await @.250
                    break()
                }
                set n = n + 1
            }
        }
        emit(:sdl.mouse.button.dn, dn, n)
        par_and {
            if !up {
                await <- SDL.event.MouseButtonUp
            }
            emit(:sdl.mouse.button.up, up)
        } with {
            await @.250
        }
    }
}

par {
    loop {
        await <- :sdl.mouse.button
        loop {
            par_or {
                await <- SDL.event.MouseButtonDown
            } with {
                await <- SDL.event.MouseButtonUp
            } with {
                await @1
                set txts = #{}
                break()
            }
        }
    }
} with {
    every _,pos,n in :sdl.mouse.button.dn {
        set txts[+] = "dn (" ++ pos.x++','++pos.y ++"): " ++ n
    }
} with {
    every _,pos in :sdl.mouse.button.up {
        set txts[+] = "up (" ++ pos.x++','++pos.y ++")"
    }
}
