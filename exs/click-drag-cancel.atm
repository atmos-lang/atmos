val SDL = require "SDL"
val TTF = require "SDL.ttf"
require "atmos"
set sdl = require "atmos.env.sdl"

val point_vs_rect = sdl.point_vs_rect

SDL.init() --> assert
TTF.init() --> assert

defer {
    TTF.quit()
    SDL.quit()
}

set WIN = SDL.createWindow @{
	title  = "Atmos-SDL: Click, Drag, Cancel",
	width  = 256,
	height = 256,
    flags  = @{ SDL.flags.OpenGL },
} --> assert

set REN = SDL.createRenderer(WIN,-1) --> assert
set sdl.ren = REN
set FNT = TTF.open("DejaVuSans.ttf", 20) --> assert

var text = " "
var rect = @{x=(256/2)-20,y=(256/2)-20, w=40,h=40}

spawn {
    every :sdl.draw {
        REN::setDrawColor(0x000000)
        REN::clear()
        REN::setDrawColor(0xFFFFFF)
        REN::fillRect(rect)
        sdl.write(FNT, text, @{x=256/2, y=200})
        REN::present()
    }
}

loop {
    val click = await(SDL.event.MouseButtonDown, \{point_vs_rect(it, rect)})
    val orig = @{x=rect.x, y=rect.y, w=rect.w, h=rect.h}
    set text = "... clicking ..."
    par_or {
        await(SDL.event.KeyDown, :Escape)
        set rect = orig
        set text = "!!! CANCELLED !!!"
    } with {
        par_or {
            await(SDL.event.MouseMotion)
            set text = "... dragging ..."
            await(SDL.event.MouseButtonUp)
            set text = "!!! DRAGGED !!!"
        } with {
            every SDL.event.MouseMotion \{
                set rect.x = orig.x + (it.x - click.x)
                set rect.y = orig.y + (it.y - click.y)
            }
        }
    } with {
        await(SDL.event.MouseButtonUp)
        set text = "!!! CLICKED !!!"
    }
}
