val unit = func (lay) {
    val L, C = (#lay, #lay[0])
    val ret = #{}
    loop l in L {
        loop c in C {
            if lay[l][c] == #ret {
                val r = @{x=c,y=l,w=nil,h=nil}
                loop cx in (c,C) {
                    until (lay[l][cx] != #ret)
                    set r.w = (cx - c) + 1
                }
                loop lx in (l,L) {
                    until (lay[lx][c] != #ret)
                    set r.h = (lx - l) + 1
                }
                set ret[+] = r
            }
        }
    }
    ret
}

val mult = func (lay, ref, rs) {
    val ret = #{}
    val px,py = (ref.w/#lay[0], ref.h/#lay)
    loop i,r in rs {
        set ret[+] = @{x=x,y=y,w=w,h=h} where {
            w = r.w * px
            h = r.h * py
            x = ref.x + (r.x * px)
            y = ref.y + (r.y * py)
        }
    }
    ret
}

func layout (lay, ref) {
    set ref = assert(ref)
    mult(lay, ref) <- unit(lay)
}

;;;
task Grid (rs) {
    spawn {
        every :Pico.Draw {
            pico.set.style(:Style.Stroke)
            loop r in rs {
                pico.output.draw.rect(r)
            }
        }
    }
    await(|false)
}
;;;

test {
    do {
        print "Test 1..."
        val lay = #{
            #{0, 1}
        }
        val u = unit(lay)
        assert(u === #{
            @{x=0,y=0,w=1,h=1},
            @{x=1,y=0,w=1,h=1},
        })

        val m1 = mult(lay, @{x=0,y=0,w=2,h=1}, u)
        assert(m1 === #{
            @{x=0,y=0,w=1,h=1},
            @{x=1,y=0,w=1,h=1},
        })

        val m2 = layout(lay, @{x=0,y=0,w=2,h=1})
        assert(m2 === #{
            @{x=0,y=0,w=1,h=1},
            @{x=1,y=0,w=1,h=1},
        })

        val m2 = layout(lay, @{x=100,y=200,w=10,h=10})
        assert(m2 === #{
            @{x=100,y=200,w=5,h=10},
            @{x=105,y=200,w=5,h=10},
        })
    }

    do {
        print "Test 2..."
        val lay = #{
            #{0,0,1},
            #{0,0,1},
            #{2,2,3},
            #{4,5,3},
        }
        val rs = layout(lay, @{x=0,y=0,w=30,h=40})
        assert(rs === #{
            @{x=00,y=00,w=20,h=20},
            @{x=20,y=00,w=10,h=20},
            @{x=00,y=20,w=20,h=10},
            @{x=20,y=20,w=10,h=20},
            @{x=00,y=30,w=10,h=10},
            @{x=10,y=30,w=10,h=10}
        })
    }

    do {
        print "Test 3..."
        val lay = #{
            #{0,0,1},
            #{0,0,1},
            #{2,2,3},
            #{4,5,6},
        }
        val rs = layout(lay, @{x=0,y=0,w=30,h=40})
        assert(rs === #{
            @{x=00,y=00,w=20,h=20},
            @{x=20,y=00,w=10,h=20},
            @{x=00,y=20,w=20,h=10},
            @{x=20,y=20,w=10,h=10},
            @{x=00,y=30,w=10,h=10},
            @{x=10,y=30,w=10,h=10},
            @{x=20,y=30,w=10,h=10},
        })
    }
}
