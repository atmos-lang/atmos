func layout_to_rects (lay, parent) {
    val COL = #lay[0]
    val LIN = #lay

    val rs1 = #{}
    loop l in LIN {
        loop c in COL {
            if lay[l][c] == #rs1 {
                val r = @{x=c,y=l,w=nil,h=nil}
                loop cx in (c,COL) {
                    until (lay[l][cx] != #rs1)
                    set r.w = (cx - c) + 1
                }
                loop lx in (l,LIN) {
                    until (lay[lx][c] != #rs1)
                    set r.h = (lx - l) + 1
                }
                set rs1[+] = r
            }
        }
    }

    val rs2 = #{}
    do {
        val X,Y,W,H =
            if parent {
                (x,y, parent.w,parent.w) where {
                    x,y = (parent.x-(parent.w/2), parent.y-(parent.h/2))
                }
            } else {
                (0,0, pico.get.size(:internal)) --> \(...){ print(...) ; ... }
            }
print(:rr, X,Y,W,H)
        val px,py = (W/COL, H/LIN)
        loop i,r in rs1 {
            set rs2[+] = @{x=x,y=y,w=w,h=h} where {
                w = r.w * px
                h = r.h * py
                x = X + (r.x * px) + (w/2)
                y = Y + (r.y * py) + (h/2)
            }
        }
    }
    rs2
}

;;;
task Grid (rs) {
    spawn {
        every :Pico.Draw {
            pico.set.style(:Style.Stroke)
            loop r in rs {
                pico.output.draw.rect(r)
            }
        }
    }
    await(|false)
}
;;;

test {
    do {
        print(:1)
        val lay = #{
            #{0, 1}
        }
        val rs = layout_to_rects(lay, #{#{0,0},#{2,1}})
        xprint(rs)
;;;
        assert(rs === #{
            [[0.5,0.5], [1,1]],
            [[1.5,0.5], [1,1]],
        })
;;;
    }
;;;
    do {
        print(:2)
        val lay = [
            [0,0,1],
            [0,0,1],
            [2,2,3],
            [4,5,3],
        ]
        val rs = layout_to_rects(lay, [#lay[0],#lay])
        print(rs)
        assert(rs === #[
            [[1.0,1.0],[2,2]],
            [[2.5,1.0],[1,2]],
            [[1.0,2.5],[2,1]],
            [[2.5,3.0],[1,2]],
            [[0.5,3.5],[1,1]],
            [[1.5,3.5],[1,1]]
        ])
    }
;;;
}
